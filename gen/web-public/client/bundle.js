(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
(function() {
  var app, mod;

  app = angular.module('PublicApp', ['ngRoute', 'oc.modal', 'ngMap', 'google.places', 'angularFileUpload', 'monospaced.elastic', 'ngAnimate', 'ngDialog', '720kb.tooltips']);

  mod = require('web-app-modules/gen/client');

  app.controller('IndexController', require('./index-controller'));

  app.controller('LocationConfigController', require('./location-config/location-config'));

  app.directive("xtable", require('./widgets/table/table'));

  app.directive("upimage", require('./widgets/up-image/up-image'));

  app.config([
    '$httpProvider', '$routeProvider', function($httpProvider, $routeProvider) {
      var userPromise;
      userPromise = {
        xxx: function($q, $http, $rootScope) {
          var i;
          if ($rootScope.user) {
            return;
          }
          i = $q.defer();
          $http.get('module/auth/getLogin').success(function(data) {
            $rootScope.user = data.user;
            return i.resolve();
          }).error(function() {
            delete $rootScope.user;
            return i.reject();
          });
          return i.promise;
        }
      };
      return $routeProvider.when('/', {
        controller: require('./home/home'),
        templateUrl: 'home/home.html'
      }).when('/home', {
        controller: require('./home/home'),
        templateUrl: 'home/home.html'
      }).when('/contact', {
        controller: require('./contact/contact'),
        templateUrl: '/contact/contact.html'
      }).when('/features', {
        controller: require('./features/features'),
        templateUrl: '/features/features.html'
      }).when('/build-menu', {
        controller: require('./build-menu/build-menu'),
        templateUrl: '/build-menu/build-menu.html'
      }).when('/build-zones', {
        controller: require('./zone-builder-screen/zone-builder-screen'),
        templateUrl: '/zone-builder-screen/zone-builder-screen.html'
      }).otherwise({
        redirectTo: '/'
      });
    }
  ]);

  module.exports = app;

}).call(this);

},{"./build-menu/build-menu":2,"./contact/contact":4,"./features/features":7,"./home/home":8,"./index-controller":9,"./location-config/location-config":10,"./widgets/table/table":25,"./widgets/up-image/up-image":26,"./zone-builder-screen/zone-builder-screen":27,"web-app-modules/gen/client":33}],2:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
(function() {
  module.exports = [
    '$scope', 'ngDialog', function($scope, ngDialog) {
      $scope.order = {
        items: []
      };
      $scope.screen = 'categories';
      $scope.productImageConfig = {
        "class": 'product-image',
        width: 300,
        height: 200,
        getImage: function() {
          return $scope.product.imageURL;
        },
        onSuccess: function(filename) {
          return $scope.product.imageURL = filename;
        }
      };
      $scope.categoriesTableConfig = {
        title: 'Categories',
        columns: ['name'],
        remove: function(cat) {
          delete $scope.menu.categories[cat.id];
          return _.remove($scope.categories, function(c) {
            return c.id === cat.id;
          });
        },
        select: function(cat) {
          $scope.category = cat;
          $scope.screen = 'category';
          $scope.options = _.filter($scope.menu.options, function(o) {
            return _.contains(cat.options, o.id);
          });
          return $scope.products = _.filter($scope.menu.products, function(p) {
            return _.contains(cat.products, p.id);
          });
        },
        add: function() {
          var cat;
          cat = {
            id: $scope.menu.nextID,
            options: [],
            products: []
          };
          $scope.menu.nextID++;
          $scope.menu.categories[cat.id] = cat;
          $scope.categories.push(cat);
          $scope.selectCategory(cat);
          $scope.options = _.filter($scope.menu.options, function(o) {
            return _.contains(cat.options, o.id);
          });
          return $scope.products = _.filter($scope.menu.products, function(p) {
            return _.contains(cat.products, p.id);
          });
        }
      };
      $scope.categoryOptionsTableConfig = {
        title: 'Options for products in this category',
        columns: ['name'],
        remove: function(opt) {
          return _.pull($scope.category.options, opt.id);
        },
        select: function(opt) {
          return $scope.selectOption(opt);
        },
        add: function() {
          return $scope.addOption();
        }
      };
      $scope.productsTableConfig = {
        title: 'Products',
        columns: ['name', 'price'],
        remove: function(p) {
          $scope.menu.products[p.id] = void 0;
          return _remove($scope.category.products, function(pr) {
            return p.id === pr;
          });
        },
        getValue: function(item, key) {
          if (key === 'price' && item[key] !== void 0) {
            return "$" + item[key];
          }
          return item[key];
        },
        select: function(p) {
          $scope.product = p;
          $scope.screen = 'product';
          if (p.options == null) {
            p.options = [];
          }
          return $scope.options = _.filter($scope.menu.options, function(o) {
            return _.contains(p.options, o.id);
          });
        },
        add: function() {
          var p;
          p = {
            id: $scope.menu.nextID,
            categories: [$scope.category.id]
          };
          $scope.product = p;
          $scope.category.products.push(p.id);
          $scope.menu.products[p.id] = p;
          return $scope.selectProduct(p);
        }
      };
      $scope.backToCategories = function() {
        return $scope.screen = 'categories';
      };
      $scope.backToCategory = function() {
        $scope.screen = 'category';
        $scope.options = _.filter($scope.menu.options, function(o) {
          return _.contains($scope.category.options, o.id);
        });
        return $scope.products = _.filter($scope.menu.products, function(p) {
          return _.contains($scope.category.products, p.id);
        });
      };
      $scope.saveProduct = function() {
        return $scope.screen = 'category';
      };
      $scope.selectOption = function(o) {
        $scope.option = o;
        return ngDialog.open({
          template: 'edit-option/edit-option.html',
          controller: require('./../edit-option/edit-option'),
          className: 'ngdialog-theme-default',
          scope: $scope
        });
      };
      $scope.addOption = function(parent) {
        var o;
        $scope.option = o = {
          id: $scope.menu.nextID,
          required: 'true',
          type: 'single',
          choices: []
        };
        $scope.menu.nextID++;
        $scope.menu.options[o.id] = o;
        parent.options.push(o.id);
        return ngDialog.open({
          template: 'edit-option/edit-option.html',
          controller: require('./../edit-option/edit-option'),
          className: 'ngdialog-theme-default',
          showClose: false,
          scope: $scope
        });
      };
      return $scope.onImageSuccess = function() {
        return console.log("ON IMAGE SUCCESS !!!");
      };
    }
  ];

}).call(this);

},{"./../edit-option/edit-option":6}],3:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
(function() {
  module.exports = ['$scope', function($scope) {}];

}).call(this);

},{}],4:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
(function() {
  module.exports = [
    '$scope', function($scope) {
      $scope.gotoPage('search');
      $scope.providerProfileController = require('./../provider-profile/provider-profile');
      $scope.businessProfileController = require('./../business-profile/business-profile');
      setTimeout(function() {
        return $('#location-search').focus();
      }, 100);
      google.maps.event.addDomListener(window, 'load', function() {
        return console.log("Maps loaded");
      });
      setTimeout(function() {
        var canvas, mapOptions;
        canvas = document.getElementById('mapCanvas');
        mapOptions = {
          center: {
            lat: 0,
            lng: 0
          },
          zoom: 8
        };
        $scope.geoCoder = new google.maps.Geocoder();
        $scope.map = new google.maps.Map(canvas, mapOptions);
        if (navigator.geolocation) {
          return navigator.geolocation.getCurrentPosition(function(position) {
            var userLocation;
            console.log(JSON.stringify(position));
            userLocation = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
            return $scope.geoCoder.geocode({
              location: userLocation
            }, function(results, status) {
              var i, len, place, ref, results1;
              console.log(status);
              console.log(JSON.stringify(results[0]));
              results1 = [];
              for (i = 0, len = results.length; i < len; i++) {
                place = results[i];
                if ((_.contains(place.types, 'country')) && (((ref = place.geometry) != null ? ref.viewport : void 0) !== void 0)) {
                  $scope.map.fitBounds(place.geometry.viewport);
                  results1.push($scope.loadCirclesForPlace(place));
                } else {
                  results1.push(void 0);
                }
              }
              return results1;
            });
          });
        }
      }, 0);
      $scope.search = {
        places: void 0
      };
      $scope.$watch('search.places', function(place) {
        if (place === void 0 || place.geometry === void 0) {
          return;
        }
        if (place.geometry.viewport) {
          $scope.map.fitBounds(place.geometry.viewport);
          $scope.map.panToBounds(place.geometry.viewport);
        } else if (place.geometry.location) {
          $scope.map.panTo(place.geometry.location);
          $scope.map.setZoom(12);
        }
        if (place.geometry.location) {
          $scope.area = place.formatted_address;
          return $scope.loadCirclesForPlace(place);
        }
      });
      $scope.onMarkerClick = function() {
        return $scope.page = 'provider-profile';
      };
      $scope.circles = [];
      return $scope.loadCirclesForPlace = function(place) {
        var c, circle, i, len, ref;
        ref = $scope.circles;
        for (i = 0, len = ref.length; i < len; i++) {
          c = ref[i];
          c.setMap(null);
        }
        circle = new google.maps.Circle({
          center: place.geometry.location,
          radius: 1000,
          map: $scope.map,
          strokeWeight: 0,
          fillColor: '#e18882',
          fillOpacity: 0.4,
          click: function(event) {}
        });
        $scope.circles.push(circle);
        return google.maps.event.addListener(circle, 'click', function(event) {
          return $scope.$apply(function() {
            return $scope.area = place.formatted_address;
          });
        });
      };
    }
  ];

}).call(this);

},{"./../business-profile/business-profile":3,"./../provider-profile/provider-profile":23}],5:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
(function() {
  module.exports = [
    '$scope', 'ngDialog', function($scope, ngDialog) {
      setTimeout(function() {
        return $('.username').focus();
      }, 100);
      $scope.onSignIn = function() {
        $scope.$parent.customer = {
          name: "Lukasz",
          signedIn: true,
          address: {
            city: "Hamilton",
            streetNumber: "123",
            streetName: "St Joseph's Drive",
            suite: "803",
            buzzer: "803",
            postalCode: "L8N2G1"
          },
          phone: "905-921-5199"
        };
        ngDialog.open({
          template: 'order-type/order-type.html',
          controller: require('./../order-type/order-type'),
          className: 'ngdialog-theme-default',
          scope: $scope.$parent
        });
        return $scope.closeThisDialog();
      };
      return $scope.onSignInCancel = function() {
        return $scope.closeThisDialog();
      };
    }
  ];

}).call(this);

},{"./../order-type/order-type":21}],6:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
(function() {
  var sourcemap_anchor;

  sourcemap_anchor = 'edit-option-controller';

  module.exports = [
    '$scope', '$timeout', function($scope, $timeout) {
      setTimeout(function() {
        return $('.option-name').focus();
      }, 100);
      $scope.choiceImageConfig = {
        "class": 'choice-image-icon',
        width: 300,
        height: 200,
        getImage: function(choice) {
          return choice.imageURL;
        },
        onSuccess: function(filename, choice) {
          return choice.imageURL = filename;
        }
      };
      $scope.save = function() {
        return $scope.closeThisDialog($scope.option);
      };
      $scope.addChoice = function() {
        $scope.menu.choices[$scope.menu.nextID] = {
          id: $scope.menu.nextID,
          name: "Choice " + ($scope.option.choices.length + 1)
        };
        $scope.option.choices.push($scope.menu.nextID);
        if (($scope.option.choices.length === 1) && ($scope.option.type === 'single') && ($scope.option["default"] === void 0)) {
          $scope.option["default"] = $scope.option.choices[0].id;
        }
        return $scope.menu.nextID++;
      };
      return $scope.removeChoice = function(choice) {
        return _.remove($scope.option.choices, function(ch) {
          return ch.id === choice.id;
        });
      };
    }
  ];

}).call(this);

},{}],7:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var FeaturesController;

  module.exports = FeaturesController = function($scope, $http) {
    return $http.post("/rest/getPrivateUserData").success(function(data, status, headers, config) {
      $scope.data = data.data;
      return $scope.error = data.error;
    }).error(function(data, status, headers, config) {
      return $scope.error = data;
    });
  };

  FeaturesController.$inject = ['$scope', '$http'];

}).call(this);

},{}],8:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
(function() {
  module.exports = [
    '$scope', 'ngDialog', function($scope, ngDialog) {
      $scope.paymentMethods = [
        {
          id: 'cc',
          name: 'Credit Card',
          itemLabel: 'Credit Card fee',
          fee: .99
        }, {
          id: 'debit',
          name: 'Debit'
        }, {
          id: 'cash',
          name: 'Cash'
        }
      ];
      $scope.order = {
        items: [
          {
            id: 1,
            quantity: 1,
            name: $scope.menu.products[1].name,
            options: {
              1: 2,
              2: 3,
              3: [6, 7]
            },
            price: 12
          }
        ]
      };
      $scope.customer = {
        signedIn: false,
        name: 'Lukasz Korzeniowski'
      };
      $scope.selectProduct = function(categoryID, productID) {
        var category, item, options, product;
        if ($scope.edit) {
          return;
        }
        product = $scope.menu.products[productID];
        category = $scope.menu.categories[categoryID];
        options = product.options;
        if ((options === void 0 || options.length === 0) && (category.options !== void 0) && (category.options.length > 0)) {
          options = category.options;
        }
        if (options && options.length > 0) {
          return ngDialog.open({
            template: 'order-product/order-product.html',
            controller: require('./../order-product/order-product'),
            resolve: {
              product: function() {
                return product;
              },
              menu: function() {
                return $scope.menu;
              }
            }
          }).closePromise.then(function(item) {
            if (item.value.id) {
              $scope.order.items.push(item.value);
            }
            return $scope.calculateTotal();
          });
        } else {
          item = _.find($scope.order.items, function(i) {
            return i.id === productID;
          });
          if (item) {
            item.quantity++;
            item.price = product.price * item.quantity;
          } else {
            item = {
              id: product.id.toString(),
              name: product.name,
              price: product.price,
              quantity: 1,
              options: {}
            };
            $scope.order.items.push(item);
          }
          return $scope.calculateTotal();
        }
      };
      $scope.removeItem = function(item, index) {
        if (item.quantity > 1) {
          item.quantity--;
        } else {
          _.pullAt($scope.order.items, index);
        }
        return $scope.calculateTotal();
      };
      $scope.calculateTotal = function() {
        var gst, item, j, len, pst, ref, total;
        total = 0;
        ref = $scope.order.items;
        for (j = 0, len = ref.length; j < len; j++) {
          item = ref[j];
          total += item.price;
        }
        $scope.order.total = total;
        gst = total * .05;
        total += gst;
        pst = total * .075;
        total += pst;
        $scope.order.taxes = [
          {
            name: 'GST',
            amount: gst
          }, {
            name: 'PST',
            amount: pst
          }
        ];
        return $scope.order.grandTotal = total;
      };
      $scope.placeOrder = function() {
        if ($scope.customer.signedIn) {
          return ngDialog.open({
            template: 'order-type/order-type.html',
            controller: require('./../order-type/order-type'),
            className: 'ngdialog-theme-default',
            scope: $scope
          });
        } else {
          return ngDialog.open({
            template: 'order-ask-account/order-ask-account.html',
            controller: require('./../order-ask-account/order-ask-account'),
            className: 'ngdialog-theme-default',
            scope: $scope
          });
        }
      };
      return $scope.calculateTotal();
    }
  ];

}).call(this);

},{"./../order-ask-account/order-ask-account":12,"./../order-product/order-product":18,"./../order-type/order-type":21}],9:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
(function() {
  var ctr, mod;

  mod = require('web-app-modules/gen/client');

  ctr = module.exports = function($scope, $location, $ocModal, $http, $rootScope, $sce) {

    /*
    	## sourceURL=hello.js
     */
    var menu;
    $scope.back = function() {
      return window.history.back();
    };
    $scope.log = function(x) {
      if (_.isObject(x)) {
        return console.log(JSON.stringify(x, null, 2));
      } else {
        return console.log(x.valueOf());
      }
    };
    $scope.getLogin = function() {
      return $http.get("/module/auth/getLogin").success(function(data, status, headers, config) {
        $scope.user = data.user;
        return $scope.checked = true;
      });
    };
    $scope.goto = function(path) {
      $scope.path = path;
      console.log("Going to " + path);
      return $location.path(path);
    };
    $scope.gotoPage = function(p) {
      return $scope.page = p;
    };
    $scope.isPage = function(p) {
      return $scope.page === p;
    };
    $scope.login = function() {};
    $scope.logout = function() {
      return $http.post("/module/auth/logout").success(function(data, status, headers, config) {
        delete $rootScope.user;
        return $location.path('/');
      });
    };
    menu = require('./menu');
    $scope.categories = menu.categories;
    $scope.options = menu.options;
    _.forOwn(menu, function(array, key) {
      var map;
      if (!_.isArray(array)) {
        return;
      }
      map = {};
      _.forEach(array, function(item) {
        return map[item.id] = item;
      });
      return menu[key] = map;
    });
    return $scope.menu = menu;
  };

  ctr.$inject = ['$scope', '$location', '$ocModal', '$http', '$rootScope', '$sce'];

}).call(this);

},{"./menu":11,"web-app-modules/gen/client":33}],10:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
(function() {
  module.exports = [
    '$scope', function($scope) {
      $scope.loc_screen = "locations";
      $scope.locations = [];
      return $scope.locationsConfig = {
        title: 'Locations',
        columns: "name",
        data: $scope.locations,
        remove: function(item) {
          return _.remove(data, function(i) {
            return i.id === item.id;
          });
        },
        select: function(item) {
          $scope.location = loc;
          return $scope.loc_screen = 'location';
        },
        add: function() {
          var loc;
          if ($scope.locations == null) {
            $scope.locations = [];
          }
          loc = {
            id: require('node-uuid').v4(),
            name: "Location " + ($scope.locations.length + 1)
          };
          $scope.locations.push(loc);
          $scope.location = loc;
          return $scope.loc_screen = "location";
        }
      };
    }
  ];

}).call(this);

},{"node-uuid":28}],11:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
(function() {
  module.exports = {
    nextID: 100,
    choices: [
      {
        id: 1,
        name: '6-inch',
        price: '3.99',
        imageURL: 'https://www.get-go.com/GetGoKitchen/Image/italianSub.jpg'
      }, {
        id: 2,
        name: '12-inch',
        price: '5.99',
        imageURL: 'https://www.get-go.com/GetGoKitchen/Image/grilledSteakSub.jpg'
      }, {
        id: 3,
        name: 'Italian',
        imageURL: 'http://www.calandrasbakery.com/food_whiteback/whitepastry1.jpg'
      }, {
        id: 4,
        name: 'Honey Oat',
        imageURL: 'http://www.calandrasbakery.com/food_whiteback/whitepastry2.jpg'
      }, {
        id: 5,
        name: 'Garlic',
        imageURL: 'http://www.calandrasbakery.com/food_whiteback/whitepastry3.jpg'
      }, {
        id: 6,
        name: '100% Ontario Ham',
        imageURL: 'http://www.calandrasbakery.com/food_whiteback/whitepastry1.jpg'
      }, {
        id: 7,
        name: 'Romaine Lettuce',
        imageURL: 'http://www.calandrasbakery.com/food_whiteback/whitepastry2.jpg'
      }, {
        id: 8,
        name: 'Exquisite Tomatoes',
        imageURL: 'http://www.calandrasbakery.com/food_whiteback/whitepastry3.jpg'
      }
    ],
    options: [
      {
        id: 1,
        name: 'Size',
        required: 'yes',
        type: 'single',
        choices: [1, 2]
      }, {
        id: 2,
        name: 'Bread',
        required: 'yes',
        type: 'single',
        choices: [3, 4, 5]
      }, {
        id: 3,
        name: 'Toppings',
        required: 'yes',
        type: 'multi',
        choices: [6, 7, 8]
      }
    ],
    categories: [
      {
        id: 1,
        name: 'Premium Subs',
        text: '6-inch    $3.99\n12-inch $5.99',
        sequence: 1,
        products: [1, 2],
        options: [1, 2, 3]
      }, {
        id: 2,
        name: 'Drinks',
        sequence: 2,
        products: ['3']
      }
    ],
    products: [
      {
        id: 1,
        name: 'Spicy Italian',
        thumbnailURL: 'http://w.subway.com/images/Menu/USA/Products/FlashFiles/RPLC_spicy_italian.jpg',
        categories: [1]
      }, {
        id: 2,
        name: 'Sweet Onion Chicken Teriayki',
        thumbnailURL: 'http://www.subway.co.nz/images/Menu-Nutrition/Subs/6g-of-Fat-or-Less/SwtO-Chckn-Tryki.jpg',
        categories: [1]
      }, {
        id: 3,
        name: 'Coca-Cola',
        price: '1.5',
        thumbnailURL: 'http://paneladebarrorestaurant.com/wp-content/uploads/2014/03/Coca-Cola-Soda.jpg',
        categories: [2]
      }
    ]
  };

}).call(this);

},{}],12:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
(function() {
  module.exports = [
    '$scope', 'ngDialog', function($scope, ngDialog) {
      var moduleName;
      moduleName = 'order-ask-account-controller';
      $scope.no = function() {
        ngDialog.open({
          template: 'order-type/order-type.html',
          controller: require('./../order-type/order-type'),
          className: 'ngdialog-theme-default',
          scope: $scope.$parent
        });
        return $scope.closeThisDialog();
      };
      return $scope.yes = function() {
        ngDialog.open({
          template: 'customer-signin/customer-signin.html',
          controller: require('./../customer-signin/customer-signin'),
          className: 'ngdialog-theme-default',
          scope: $scope.$parent
        });
        return $scope.closeThisDialog();
      };
    }
  ];

}).call(this);

},{"./../customer-signin/customer-signin":5,"./../order-type/order-type":21}],13:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
(function() {
  module.exports = [
    '$scope', 'ngDialog', function($scope, ngDialog) {
      return $scope["continue"] = function() {
        ngDialog.open({
          template: 'order-delivery-time/order-delivery-time.html',
          controller: require('./../order-delivery-time/order-delivery-time'),
          className: 'ngdialog-theme-default',
          scope: $scope.$parent
        });
        return $scope.closeThisDialog();
      };
    }
  ];

}).call(this);

},{"./../order-delivery-time/order-delivery-time":15}],14:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
(function() {
  module.exports = [
    '$scope', 'ngDialog', function($scope, ngDialog) {
      _.remove($scope.$parent.order.items, function(i) {
        return i.id === 'delivery';
      });
      $scope.$parent.calculateTotal();
      $scope["continue"] = function() {
        $scope.$parent.order.items.push({
          id: 'delivery',
          name: 'Delivery',
          price: 4.99
        });
        return $scope.next();
      };
      $scope.pickup = function() {
        return $scope.next();
      };
      return $scope.next = function() {
        var ref;
        if ((ref = $scope.$parent.customer) != null ? ref.signedIn : void 0) {
          ngDialog.open({
            template: 'order-delivery-time/order-delivery-time.html',
            controller: require('./../order-delivery-time/order-delivery-time'),
            className: 'ngdialog-theme-default',
            scope: $scope.$parent
          });
        } else {
          ngDialog.open({
            template: 'order-save-account/order-save-account.html',
            controller: require('./../order-save-account/order-save-account'),
            className: 'ngdialog-theme-default',
            scope: $scope.$parent
          });
        }
        return $scope.closeThisDialog();
      };
    }
  ];

}).call(this);

},{"./../order-delivery-time/order-delivery-time":15,"./../order-save-account/order-save-account":20}],15:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
(function() {
  module.exports = [
    '$scope', 'ngDialog', function($scope, ngDialog) {
      $scope.now = function() {
        $scope.$parent.order.when = 'now';
        ngDialog.open({
          template: 'order-payment-method/order-payment-method.html',
          controller: require('./../order-payment-method/order-payment-method'),
          className: 'ngdialog-theme-default',
          scope: $scope.$parent
        });
        return $scope.closeThisDialog();
      };
      return $scope["continue"] = function() {
        $scope.$parent.order.when = 'sheduled';
        ngDialog.open({
          template: 'order-payment-method/order-payment-method.html',
          controller: require('./../order-payment-method/order-payment-method'),
          className: 'ngdialog-theme-default',
          scope: $scope.$parent
        });
        return $scope.closeThisDialog();
      };
    }
  ];

}).call(this);

},{"./../order-payment-method/order-payment-method":17}],16:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
(function() {
  module.exports = [
    '$scope', 'ngDialog', function($scope, ngDialog) {
      var moduleName;
      moduleName = 'order-location-controller';
      $scope["continue"] = function() {
        var ref;
        if ($scope.$parent.order.how === 'delivery') {
          $scope.getDeliveryCost(function(cost) {
            if (cost) {
              $scope.$parent.deliveryCost = cost;
              return ngDialog.open({
                template: 'order-delivery-cost/order-delivery-cost.html',
                controller: require('./../order-delivery-cost/order-delivery-cost'),
                className: 'ngdialog-theme-default',
                scope: $scope.$parent
              });
            }
          });
        } else if ((ref = $scope.$parent.customer) != null ? ref.signedIn : void 0) {

        } else {
          ngDialog.open({
            template: 'order-save-account/order-save-account.html',
            controller: require('./../order-save-account/order-save-account'),
            className: 'ngdialog-theme-default',
            scope: $scope.$parent
          });
        }
        return $scope.closeThisDialog();
      };
      return $scope.getDeliveryCost = function(callback) {
        return callback(4.99);
      };
    }
  ];

}).call(this);

},{"./../order-delivery-cost/order-delivery-cost":14,"./../order-save-account/order-save-account":20}],17:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
(function() {
  module.exports = [
    '$scope', 'ngDialog', function($scope, ngDialog) {
      return $scope.onMethod = function(m) {
        $scope.$parent.order.paymentMethod = m.id;
        _.remove($scope.$parent.order.items, function(i) {
          return i.id === 'payment-fee';
        });
        if (m.fee) {
          $scope.$parent.order.items.push({
            id: 'payment-fee',
            name: m.itemLabel,
            price: m.fee
          });
          $scope.calculateTotal();
        }
        ngDialog.open({
          template: 'order-review/order-review.html',
          controller: require('./../order-review/order-review'),
          className: 'ngdialog-theme-default',
          scope: $scope.$parent
        });
        return $scope.closeThisDialog();
      };
    }
  ];

}).call(this);

},{"./../order-review/order-review":19}],18:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
(function() {
  module.exports = [
    '$scope', 'ngDialog', 'menu', 'product', function($scope, ngDialog, menu, product) {
      var cID, category, i, len, options, ref;
      console.log("New Product Order controller");
      $scope.product = product;
      $scope.menu = menu;
      $scope.item = {
        id: $scope.product.id,
        name: $scope.product.name,
        price: $scope.product.price,
        quantity: 1,
        options: {}
      };
      options = [];
      ref = $scope.product.categories;
      for (i = 0, len = ref.length; i < len; i++) {
        cID = ref[i];
        category = $scope.menu.categories[cID];
        if (category.options !== void 0) {
          options = options.concat(category.options);
        }
      }
      options = _.unique(options);
      $scope.options = _.map(options, function(oID) {
        return $scope.menu.options[oID];
      });
      if ($scope.options.length > 0) {
        $scope.activeOptionIndex = 0;
      }
      $scope.activateOption = function(index) {
        return $scope.activeOptionIndex = index;
      };
      $scope.less = function() {
        $scope.item.quantity--;
        if ($scope.item.quantity === 0) {
          return $scope.item.quantity = 1;
        }
      };
      $scope.more = function() {
        return $scope.item.quantity++;
      };
      $scope.onChoice = function(chID, opt, optIndex) {
        var base, name;
        if (opt.type === 'single') {
          $scope.item.options[opt.id] = chID;
        }
        if (opt.type === 'multi') {
          if ((base = $scope.item.options)[name = opt.id] == null) {
            base[name] = [];
          }
          if (_.contains($scope.item.options[opt.id], chID)) {
            _.pull($scope.item.options[opt.id], chID);
          } else {
            $scope.item.options[opt.id].push(chID);
          }
        }
        return $scope.ready = _.every($scope.options, function(o) {
          return $scope.item.options[o.id] !== void 0;
        });
      };
      $scope.isActive = function(opt, choiceID) {
        if (opt.type === 'single') {
          return $scope.item.options[opt.id] === choiceID;
        }
        if (opt.type === 'multi') {
          if ($scope.item.options[opt.id] === void 0) {
            return false;
          }
          return _.contains($scope.item.options[opt.id], choiceID);
        }
      };
      $scope.getItemPrice = function(item) {
        var c, choice, j, len1, multiChoice, optionID, price, ref1;
        price = 0;
        if (item.categories) {
          category = item.categories[0];
          if (category.price) {
            price = category.price;
          }
        }
        if (item.price) {
          price = item.price;
        }
        if (item.options) {
          ref1 = item.options;
          for (optionID in ref1) {
            choice = ref1[optionID];
            if (_.isArray(choice)) {
              for (j = 0, len1 = choice.length; j < len1; j++) {
                multiChoice = choice[j];
                c = $scope.menu.choices[multiChoice];
                if (c.price) {
                  price += c.price;
                }
              }
            } else {
              c = $scope.menu.choices[choice];
              if (c.price) {
                price += c.price;
              }
            }
          }
        }
        if (item.quantity) {
          return price = price * item.quantity;
        }
      };
      return $scope.confirm = function() {
        if (!$scope.ready) {
          return;
        }
        $scope.item.price = $scope.getItemPrice($scope.item);
        return $scope.closeThisDialog($scope.item);
      };
    }
  ];

}).call(this);

},{}],19:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
(function() {
  module.exports = [
    '$scope', function($scope) {
      var name;
      name = 'order-review-controller';
      return $scope.confirm = function() {
        return $scope.closeThisDialog();
      };
    }
  ];

}).call(this);

},{}],20:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
(function() {
  module.exports = [
    '$scope', 'ngDialog', function($scope, ngDialog) {
      $scope.save = function() {
        ngDialog.open({
          template: 'order-create-account/order-create-account.html',
          controller: require('./../order-create-account/order-create-account'),
          className: 'ngdialog-theme-default',
          scope: $scope.$parent
        });
        return $scope.closeThisDialog();
      };
      return $scope.dontSave = function() {
        ngDialog.open({
          template: 'order-delivery-time/order-delivery-time.html',
          controller: require('./../order-delivery-time/order-delivery-time'),
          className: 'ngdialog-theme-default',
          scope: $scope.$parent
        });
        return $scope.closeThisDialog();
      };
    }
  ];

}).call(this);

},{"./../order-create-account/order-create-account":13,"./../order-delivery-time/order-delivery-time":15}],21:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
(function() {
  module.exports = [
    '$scope', 'ngDialog', function($scope, ngDialog) {
      $scope.delivery = function() {
        $scope.$parent.order.how = 'delivery';
        return $scope.next();
      };
      $scope.pickup = function() {
        $scope.$parent.order.how = 'pickup';
        return $scope.next();
      };
      return $scope.next = function() {
        ngDialog.open({
          template: 'order-location/order-location.html',
          controller: require('./../order-location/order-location'),
          className: 'ngdialog-theme-default',
          scope: $scope.$parent
        });
        return $scope.closeThisDialog();
      };
    }
  ];

}).call(this);

},{"./../order-location/order-location":16}],22:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
(function() {
  module.exports = [
    '$scope', function($scope) {
      $scope.weeks = [];
      $scope.weekDays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
      $scope.monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
      $scope.today = new XDate();
      $scope.selectDay = function(day) {
        var a, d;
        if ($scope.editing) {
          d = new XDate(day.date).getTime();
          a = $scope.person.availability;
          if (_.contains(a, d)) {
            _.remove(a, function(t) {
              return t === d;
            });
          } else {
            a.push(d);
          }
          return $scope.updateCalendar();
        }
      };
      $scope.prevMonth = function() {
        $scope.month--;
        if ($scope.month === -1) {
          $scope.month = 11;
          $scope.year--;
        }
        return $scope.updateCalendar();
      };
      $scope.nextMonth = function() {
        $scope.month++;
        if ($scope.month === 12) {
          $scope.month = 0;
          $scope.year++;
        }
        return $scope.updateCalendar();
      };
      $scope.updateCalendar = function() {
        var current, day, firstDayOfMonth, i, isPast, isSelected, isToday, results, week;
        firstDayOfMonth = new XDate($scope.year, $scope.month, 1);
        current = new XDate(firstDayOfMonth).addDays(-firstDayOfMonth.getDay());
        results = [];
        for (week = i = 0; i <= 5; week = ++i) {
          $scope.weeks[week] = {
            number: 1,
            days: []
          };
          results.push((function() {
            var j, results1;
            results1 = [];
            for (day = j = 0; j <= 6; day = ++j) {
              isToday = Math.floor(current.diffDays($scope.today)) === 0;
              isPast = current.diffDays($scope.today) >= 1;
              isSelected = _.contains($scope.person.availability, current.getTime());
              $scope.weeks[week].days.push({
                number: current.getDate(),
                date: current.toDate(),
                enabled: current.getMonth() === $scope.month || isPast,
                today: isToday,
                selected: isSelected,
                past: isPast
              });
              results1.push(current.addDays(1));
            }
            return results1;
          })());
        }
        return results;
      };
      $scope.month = $scope.today.getMonth();
      $scope.year = $scope.today.getFullYear();
      return $scope.updateCalendar();
    }
  ];

}).call(this);

},{}],23:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
(function() {
  module.exports = [
    '$scope', 'FileUploader', function($scope, FileUploader) {
      var uploader;
      $scope.calendarController = require('./calendar/calendar');
      $scope.person = {
        name: "Kasia",
        title: "Profesjonalna dupencja",
        description: "24 lata, fajna dupa ze mnie",
        contacts: [
          {
            type: 'Email',
            value: 'kasia@serveus.com'
          }, {
            type: 'Telefon',
            value: '000 000 0000'
          }
        ],
        services: [
          {
            name: 'Cleaning'
          }, {
            name: 'Ironing'
          }, {
            name: 'Babysitting'
          }, {
            name: 'Shovelling snow'
          }
        ],
        prices: [
          {
            name: 'Godzina u ciebie',
            value: '200 zl'
          }, {
            name: 'Godzina u mnie',
            value: '200 zl'
          }, {
            name: 'Lodziak',
            value: '+50 zl'
          }
        ],
        hours: [
          {
            name: 'Poniedzialek',
            value: '23:00 - 8:00'
          }, {
            name: 'Wtorek',
            value: '23:00 - 8:00'
          }, {
            name: 'Sroda',
            value: '23:00 - 8:00'
          }, {
            name: 'Czwartek',
            value: '23:00 - 8:00'
          }, {
            name: 'Piatek',
            value: '23:00 - 8:00'
          }, {
            name: 'Sobota',
            value: '23:00 - 8:00'
          }
        ],
        availability: [new XDate(2015, 4, 10).getTime(), new XDate(2015, 4, 11).getTime(), new XDate(2015, 4, 13).getTime(), new XDate(2015, 4, 14).getTime()],
        pictures: []
      };
      $scope.save = function() {
        return $scope.toggleEdit();
      };
      $scope.toggleEdit = function() {
        $scope.editing = !$scope.editing;
        if ($scope.editing && $scope.person.location) {
          return $scope.search.places = $scope.person.location.name;
        }
      };
      $scope.newContact = function() {
        return $scope.person.contacts.push({});
      };
      $scope.deleteContact = function(c, index) {
        return $scope.person.contacts.splice(index, 1);
      };
      $scope.newService = function() {
        return $scope.person.services.push({});
      };
      $scope.deleteService = function(s, index) {
        return $scope.person.services.splice(index, 1);
      };
      $scope.newPrice = function() {
        return $scope.person.prices.push({});
      };
      $scope.deletePrice = function(p, index) {
        return $scope.person.prices.splice(index, 1);
      };
      $scope.newHour = function() {
        return $scope.person.hours.push({});
      };
      $scope.deleteHour = function(p, index) {
        return $scope.person.hours.splice(index, 1);
      };
      setTimeout(function() {
        return $('#location-search').focus();
      }, 100);
      uploader = $scope.uploader = new FileUploader;
      uploader.scope = $scope;
      uploader.url = 'rest/uploadGraphic';
      uploader.onAfterAddingFile = function(event, item) {
        return $scope.uploader.uploadAll();
      };
      uploader.onSuccessItem = function(item, response, status, headers) {
        var photo;
        if (response.result === 'success') {
          photo = {
            url: "graphic/" + response.file
          };
          return $scope.person.pictures.push(photo);
        }
      };
      google.maps.event.addDomListener(window, 'load', function() {
        return console.log("Maps loaded");
      });
      $scope.geoCoder = new google.maps.Geocoder();
      setTimeout(function() {
        var canvas, mapOptions;
        canvas = document.getElementById('locationCanvas');
        mapOptions = {
          center: {
            lat: 0,
            lng: 0
          },
          zoom: 8
        };
        return $scope.map = new google.maps.Map(canvas, mapOptions);
      }, 0);
      $scope.getMapURL = function() {
        var width;
        if ($scope.person.location === void 0) {
          return void 0;
        }
        width = $("#location-bar").outerWidth();
        return "https://maps.googleapis.com/maps/api/staticmap?center=" + $scope.person.location.name + "&size=" + width + "x200";
      };
      $scope.search = {
        places: void 0
      };
      return $scope.$watch('search.places', function(place) {
        if (place === void 0 || place.geometry === void 0) {
          return;
        }
        return $scope.person.location = {
          name: place.formatted_address,
          lat: place.geometry.location.lat(),
          lng: place.geometry.location.lng()
        };
      });
    }
  ];

}).call(this);

},{"./calendar/calendar":22}],24:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
(function() {
  module.exports = [
    '$scope', '$http', 'config', 'image', 'arg', function($scope, $http, config, image, arg) {
      $scope.$on('ngDialog.opened', function(e, $dialog) {
        var pic;
        $scope.config = config;
        $scope.cropImage = image;
        pic = $(".crop-image img");
        $(".crop-image").width(config.width);
        $(".crop-image").height(config.height);
        $(".crop-image").hide();
        return pic.bind("load", function(e) {
          pic.on('mousewheel', function(event) {
            if (event.deltaY > 0) {
              pic.guillotine('zoomIn');
            }
            if (event.deltaY < 0) {
              pic.guillotine('zoomOut');
            }
            return console.log(event.deltaY);
          });
          pic.guillotine({
            width: config.width,
            height: config.height
          });
          pic.guillotine('fit');
          return $(".crop-image").show();
        });
      });
      return $scope.save = function() {
        var data, picture;
        picture = $(".crop-image img");
        data = picture.guillotine('getData');
        console.log(data);
        return $http.post("/rest/crop", {
          data: data,
          imageURL: $scope.cropImage
        }).success(function(data, status, headers, config) {
          var newImageName;
          newImageName = $scope.cropImage + "?" + require('node-uuid').v4();
          if ($scope.config.onSuccess) {
            $scope.config.onSuccess(newImageName, arg);
          }
          return $scope.closeThisDialog();
        }).error(function(data, status, headers, config) {
          console.log(data);
          return $scope.closeThisDialog();
        });
      };
    }
  ];

}).call(this);

},{"node-uuid":28}],25:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
(function() {
  module.exports = function() {
    return {
      restrict: 'E',
      scope: {
        config: "=",
        data: "="
      },
      templateUrl: '/widgets/table/table.html',
      controller: function($scope, $element, $attrs, $transclude) {},
      link: function($scope, element, attributes, controller) {
        if ($scope.config.page === void 0) {
          $scope.config.page = 1;
        }
        if ($scope.config.getRecordCount) {
          $scope.config.getRecordCount();
        }
        if ($scope.config.getValue === void 0) {
          $scope.config.getValue = function(item, key) {
            return item[key];
          };
        }
        return $scope.select = function(item) {
          if ($scope.config.select) {
            return $scope.config.select(item);
          }
        };
      }
    };
  };

}).call(this);

},{}],26:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
(function() {
  module.exports = [
    'FileUploader', '$timeout', 'ngDialog', function(FileUploader, $timeout, ngDialog) {
      return {
        restrict: 'E',
        scope: {
          config: "=",
          arg: "="
        },
        templateUrl: 'widgets/up-image/up-image.html',
        controller: function($scope, $element, $attrs, $transclude) {
          var uploader;
          uploader = $scope.uploader = new FileUploader;
          uploader.scope = $scope;
          uploader.url = 'rest/uploadGraphic';
          $scope.image = $scope.config.getImage($scope.arg);
          uploader.onAfterAddingFile = function(event, item) {
            return $scope.uploader.uploadAll();
          };
          uploader.onSuccessItem = function(item, response, status, headers) {
            if (response.result === 'success') {
              return ngDialog.open({
                template: 'widgets/crop-image/crop-image.html',
                controller: require('./../crop-image/crop-image'),
                className: 'ngdialog-theme-default',
                resolve: {
                  config: function() {
                    return $scope.config;
                  },
                  arg: function() {
                    return $scope.arg;
                  },
                  image: function() {
                    return response.file;
                  }
                }
              }).closePromise.then(function() {
                return $scope.image = $scope.config.getImage($scope.arg);
              });
            }
          };
          return $scope.onClick = function() {
            return $timeout(function() {
              return $element.find("input").click();
            });
          };
        }
      };
    }
  ];

}).call(this);

},{"./../crop-image/crop-image":24}],27:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
(function() {
  module.exports = [
    '$scope', function($scope) {
      $scope.zones = [];
      $scope.polyOptions = {
        strokeColor: '#000000',
        strokeOpacity: 1.0,
        strokeWeight: 3
      };
      $scope.addZone = function() {
        var zone;
        zone = {
          name: "New Zone",
          boundary: []
        };
        $scope.zones.push(zone);
        return $scope.selectZone(zone);
      };
      $scope.selectZone = function(zone) {
        return $scope.zone = zone;
      };
      return setTimeout(function() {
        var canvas, i, j, len, len1, mapOptions, path, point, ref, ref1, zone;
        canvas = document.getElementById('mapCanvas');
        mapOptions = {
          center: {
            lat: 0,
            lng: 0
          },
          zoom: 8
        };
        $scope.geoCoder = new google.maps.Geocoder();
        $scope.map = new google.maps.Map(canvas, mapOptions);
        ref = $scope.zones;
        for (i = 0, len = ref.length; i < len; i++) {
          zone = ref[i];
          zone.poly = new google.maps.Polyline($scope.polyOptions);
          zone.poly.setMap($scope.map);
          path = zone.poly.getPath();
          ref1 = zone.boundary;
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            point = ref1[j];
            path.push(point);
          }
        }
        return google.maps.event.addListener($scope.map, 'click', function(event) {
          if (!$scope.zone) {
            return;
          }
          return $scope.zone.poly.getPath().push(event.latLng);
        });
      }, 0);
    }
  ];

}).call(this);

},{}],28:[function(require,module,exports){
//     uuid.js
//
//     Copyright (c) 2010-2012 Robert Kieffer
//     MIT License - http://opensource.org/licenses/mit-license.php

(function() {
  var _global = this;

  // Unique ID creation requires a high quality random # generator.  We feature
  // detect to determine the best RNG source, normalizing to a function that
  // returns 128-bits of randomness, since that's what's usually required
  var _rng;

  // Node.js crypto-based RNG - http://nodejs.org/docs/v0.6.2/api/crypto.html
  //
  // Moderately fast, high quality
  if (typeof(_global.require) == 'function') {
    try {
      var _rb = _global.require('crypto').randomBytes;
      _rng = _rb && function() {return _rb(16);};
    } catch(e) {}
  }

  if (!_rng && _global.crypto && crypto.getRandomValues) {
    // WHATWG crypto-based RNG - http://wiki.whatwg.org/wiki/Crypto
    //
    // Moderately fast, high quality
    var _rnds8 = new Uint8Array(16);
    _rng = function whatwgRNG() {
      crypto.getRandomValues(_rnds8);
      return _rnds8;
    };
  }

  if (!_rng) {
    // Math.random()-based (RNG)
    //
    // If all else fails, use Math.random().  It's fast, but is of unspecified
    // quality.
    var  _rnds = new Array(16);
    _rng = function() {
      for (var i = 0, r; i < 16; i++) {
        if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
        _rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
      }

      return _rnds;
    };
  }

  // Buffer class to use
  var BufferClass = typeof(_global.Buffer) == 'function' ? _global.Buffer : Array;

  // Maps for number <-> hex string conversion
  var _byteToHex = [];
  var _hexToByte = {};
  for (var i = 0; i < 256; i++) {
    _byteToHex[i] = (i + 0x100).toString(16).substr(1);
    _hexToByte[_byteToHex[i]] = i;
  }

  // **`parse()` - Parse a UUID into it's component bytes**
  function parse(s, buf, offset) {
    var i = (buf && offset) || 0, ii = 0;

    buf = buf || [];
    s.toLowerCase().replace(/[0-9a-f]{2}/g, function(oct) {
      if (ii < 16) { // Don't overflow!
        buf[i + ii++] = _hexToByte[oct];
      }
    });

    // Zero out remaining bytes if string was short
    while (ii < 16) {
      buf[i + ii++] = 0;
    }

    return buf;
  }

  // **`unparse()` - Convert UUID byte array (ala parse()) into a string**
  function unparse(buf, offset) {
    var i = offset || 0, bth = _byteToHex;
    return  bth[buf[i++]] + bth[buf[i++]] +
            bth[buf[i++]] + bth[buf[i++]] + '-' +
            bth[buf[i++]] + bth[buf[i++]] + '-' +
            bth[buf[i++]] + bth[buf[i++]] + '-' +
            bth[buf[i++]] + bth[buf[i++]] + '-' +
            bth[buf[i++]] + bth[buf[i++]] +
            bth[buf[i++]] + bth[buf[i++]] +
            bth[buf[i++]] + bth[buf[i++]];
  }

  // **`v1()` - Generate time-based UUID**
  //
  // Inspired by https://github.com/LiosK/UUID.js
  // and http://docs.python.org/library/uuid.html

  // random #'s we need to init node and clockseq
  var _seedBytes = _rng();

  // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
  var _nodeId = [
    _seedBytes[0] | 0x01,
    _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]
  ];

  // Per 4.2.2, randomize (14 bit) clockseq
  var _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;

  // Previous uuid creation time
  var _lastMSecs = 0, _lastNSecs = 0;

  // See https://github.com/broofa/node-uuid for API details
  function v1(options, buf, offset) {
    var i = buf && offset || 0;
    var b = buf || [];

    options = options || {};

    var clockseq = options.clockseq != null ? options.clockseq : _clockseq;

    // UUID timestamps are 100 nano-second units since the Gregorian epoch,
    // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
    // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
    // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
    var msecs = options.msecs != null ? options.msecs : new Date().getTime();

    // Per 4.2.1.2, use count of uuid's generated during the current clock
    // cycle to simulate higher resolution clock
    var nsecs = options.nsecs != null ? options.nsecs : _lastNSecs + 1;

    // Time since last uuid creation (in msecs)
    var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;

    // Per 4.2.1.2, Bump clockseq on clock regression
    if (dt < 0 && options.clockseq == null) {
      clockseq = clockseq + 1 & 0x3fff;
    }

    // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
    // time interval
    if ((dt < 0 || msecs > _lastMSecs) && options.nsecs == null) {
      nsecs = 0;
    }

    // Per 4.2.1.2 Throw error if too many uuids are requested
    if (nsecs >= 10000) {
      throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
    }

    _lastMSecs = msecs;
    _lastNSecs = nsecs;
    _clockseq = clockseq;

    // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
    msecs += 12219292800000;

    // `time_low`
    var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
    b[i++] = tl >>> 24 & 0xff;
    b[i++] = tl >>> 16 & 0xff;
    b[i++] = tl >>> 8 & 0xff;
    b[i++] = tl & 0xff;

    // `time_mid`
    var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;
    b[i++] = tmh >>> 8 & 0xff;
    b[i++] = tmh & 0xff;

    // `time_high_and_version`
    b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
    b[i++] = tmh >>> 16 & 0xff;

    // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
    b[i++] = clockseq >>> 8 | 0x80;

    // `clock_seq_low`
    b[i++] = clockseq & 0xff;

    // `node`
    var node = options.node || _nodeId;
    for (var n = 0; n < 6; n++) {
      b[i + n] = node[n];
    }

    return buf ? buf : unparse(b);
  }

  // **`v4()` - Generate random UUID**

  // See https://github.com/broofa/node-uuid for API details
  function v4(options, buf, offset) {
    // Deprecated - 'format' argument, as supported in v1.2
    var i = buf && offset || 0;

    if (typeof(options) == 'string') {
      buf = options == 'binary' ? new BufferClass(16) : null;
      options = null;
    }
    options = options || {};

    var rnds = options.random || (options.rng || _rng)();

    // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
    rnds[6] = (rnds[6] & 0x0f) | 0x40;
    rnds[8] = (rnds[8] & 0x3f) | 0x80;

    // Copy bytes to buffer, if provided
    if (buf) {
      for (var ii = 0; ii < 16; ii++) {
        buf[i + ii] = rnds[ii];
      }
    }

    return buf || unparse(rnds);
  }

  // Export public API
  var uuid = v4;
  uuid.v1 = v1;
  uuid.v4 = v4;
  uuid.parse = parse;
  uuid.unparse = unparse;
  uuid.BufferClass = BufferClass;

  if (typeof(module) != 'undefined' && module.exports) {
    // Publish as node.js module
    module.exports = uuid;
  } else  if (typeof define === 'function' && define.amd) {
    // Publish as AMD module
    define(function() {return uuid;});
 

  } else {
    // Publish as global (in browsers)
    var _previousRoot = _global.uuid;

    // **`noConflict()` - (browser only) to reset global 'uuid' var**
    uuid.noConflict = function() {
      _global.uuid = _previousRoot;
      return uuid;
    };

    _global.uuid = uuid;
  }
}).call(this);

},{}],29:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var ChangePasswordController;

  module.exports = ChangePasswordController = function($scope, $http, $location) {
    $scope.changePassword = function() {
      if (!$scope.newpass || $scope.newpass.length === 0) {
        $scope.error = "Password is required";
        return;
      }
      if ($scope.newpass !== $scope.newpass2) {
        $scope.error = "Passwords don't match";
        return;
      }
      return $http.post("changePassword", {
        password: $scope.newpass
      }).error(function(data, status, headers, config) {
        return $scope.error = data;
      }).success(function(data, status, headers, config) {
        $scope.error = data.error;
        if (!$scope.error) {
          return $scope.changed = true;
        }
      });
    };
    return $scope.cancel = function() {
      return $location.path("/");
    };
  };

  ChangePasswordController.$inject = ['$scope', '$http', '$location'];

}).call(this);

},{}],30:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  module.exports = function($q, $modal, $injector, $timeout, $location) {
    return {
      'response': function(response) {
        var def;
        if (response.data === 'NOT AUTHENTICATED') {
          def = $q.defer();
          $modal.open({
            templateUrl: 'module/auth/login.html',
            controller: require('./login')
          }).result.then(function(user) {
            var http;
            http = $injector.get('$http');
            return http(response.config).then(function(secondResponse) {
              return def.resolve(secondResponse);
            });
          }, function() {
            def.reject("NOT AUTHENTICATED");
            return $location.path('/');
          });
          return def.promise;
        } else {
          return response;
        }
      }
    };
  };

}).call(this);

},{"./login":31}],31:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var LoginController;

  module.exports = LoginController = function($scope, $http, $modalInstance, $rootScope) {
    setTimeout(function() {
      return $('#username').focus();
    }, 100);
    $scope.login = function() {
      return $http.post('module/auth/login', {
        username: this.username,
        password: this.password
      }).error(function(data, status, headers, config) {
        return $scope.error = data;
      }).success(function(data, status, headers, config) {
        if (data.error) {
          return $scope.error = data.error;
        } else {
          $rootScope.user = data.user;
          return $modalInstance.close(data.user);
        }
      });
    };
    $scope.passwordReset = function() {
      $scope.resetting = true;
      delete $scope.error;
      return setTimeout(function() {
        return $('.focusme').focus();
      }, 100);
    };
    $scope.resetContinue = function() {
      if (!$scope.email || $scope.email.length === 0) {
        $scope.error = "Email is required";
        return;
      }
      return $http.post("module/auth/requestPasswordReset", {
        email: $scope.email
      }).success(function(data, status, headers, config) {
        $scope.error = data.error;
        if (!data.error) {
          return $scope.sent = true;
        }
      }).error(function(data, status, headers, config) {
        return $scope.error = data;
      });
    };
    $scope.close = function() {
      return $ocModal.close();
    };
    return $scope.resetCancel = function() {
      $scope.resetting = false;
      delete $scope.error;
      return setTimeout(function() {
        return $('#username').focus();
      }, 100);
    };
  };

  LoginController.$inject = ['$scope', '$http', '$modalInstance', '$rootScope'];

}).call(this);

},{}],32:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var SignupController;

  module.exports = SignupController = function($scope, $ocModal, $http) {
    setTimeout(function() {
      return $('#username').focus();
    }, 100);
    $scope.signup = function() {
      return $http.post("signup", {
        user: $scope.user
      }).error(function(data, status, headers, config) {
        return $scope.error = data;
      }).success(function(data, status, headers, config) {
        if (data.error) {
          return $scope.error = data.error;
        } else {
          return $scope.sent = true;
        }
      });
    };
    return $scope.close = function() {
      return $ocModal.close();
    };
  };

  SignupController.$inject = ['$scope', '$ocModal', '$http'];

}).call(this);

},{}],33:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  module.exports = {
    payment: {
      loadBalance: require('./payments/client/load-balance')
    },
    auth: {
      changePassword: require('./authentication/client/change-password'),
      login: require('./authentication/client/login'),
      loginInterceptor: require('./authentication/client/login-interceptor'),
      signup: require('./authentication/client/signup')
    }
  };

}).call(this);

},{"./authentication/client/change-password":29,"./authentication/client/login":31,"./authentication/client/login-interceptor":30,"./authentication/client/signup":32,"./payments/client/load-balance":34}],34:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var LoadBalanceController;

  module.exports = LoadBalanceController = function($scope, $http, $modalInstance) {
    setTimeout(function() {
      return $('.amount').focus();
    }, 100);
    $scope.doPay = function() {
      var handler;
      if (!$scope.amount || $scope.amount.length === 0) {
        $scope.error = "Amount is required";
        return;
      }
      if (isNaN($scope.amount)) {
        $scope.error = "Amount must be a number";
        return;
      }
      delete $scope.error;
      handler = StripeCheckout.configure({
        key: 'pk_test_6pRNASCoBOKtIshFeQd4XMUh',
        image: '/img/documentation/checkout/marketplace.png',
        token: function(token) {
          return $http.post("module/payment/loadBalance", {
            token: token
          }).success(function(data, status, headers, config) {
            $scope.error = data.error;
            if (!$scope.error) {
              return $scope.confirmed = true;
            }
          }).error(function(data, status, headers, config) {
            return $scope.error = data;
          });
        }
      });
      return handler.open({
        name: 'Webapp',
        description: 'Webapp subscription',
        amount: $scope.amount
      });
    };
    $scope.cancel = function() {
      return $modalInstance.close();
    };
    return $scope.close = function() {
      return $modalInstance.close();
    };
  };

  LoadBalanceController.$inject = ['$scope', '$http', '$modalInstance'];

}).call(this);

},{}]},{},[1]);
