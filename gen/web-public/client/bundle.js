(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var app;

  app = angular.module('PublicApp', ['ngRoute', 'oc.modal', 'ui.bootstrap']);

  app.controller('IndexController', require('./index-controller'));

  app.factory('LoginInterceptor', require('./login/login-interceptor'));

  app.config([
    '$httpProvider', '$routeProvider', function($httpProvider, $routeProvider) {
      $httpProvider.interceptors.push('LoginInterceptor');
      return $routeProvider.when('/', {
        controller: require('./home/home'),
        templateUrl: 'home/home.html'
      }).when('/contact', {
        controller: require('./contact/contact'),
        templateUrl: '/contact/contact.html'
      }).when('/features', {
        controller: require('./features/features'),
        templateUrl: '/features/features.html'
      }).when('/change-password', {
        controller: require('./change-password/change-password'),
        templateUrl: '/change-password/change-password.html'
      }).otherwise({
        redirectTo: '/'
      });
    }
  ]);

  module.exports = app;

}).call(this);

},{"./change-password/change-password":2,"./contact/contact":3,"./features/features":4,"./home/home":5,"./index-controller":6,"./login/login-interceptor":7}],2:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var ChangePasswordController;

  module.exports = ChangePasswordController = function($scope, $http, $location) {
    $scope.changePassword = function() {
      if (!$scope.newpass || $scope.newpass.length === 0) {
        $scope.error = "Password is required";
        return;
      }
      if ($scope.newpass !== $scope.newpass2) {
        $scope.error = "Passwords don't match";
        return;
      }
      return $http.post("/rest/changePassword", {
        password: $scope.newpass
      }).error(function(data, status, headers, config) {
        return $scope.error = data;
      }).success(function(data, status, headers, config) {
        $scope.error = data.error;
        if (!$scope.error) {
          return $scope.changed = true;
        }
      });
    };
    return $scope.cancel = function() {
      return $location.path("/");
    };
  };

  ChangePasswordController.$inject = ['$scope', '$http', '$location'];

}).call(this);

},{}],3:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var ContactController;

  module.exports = ContactController = function($scope) {};

  ContactController.$inject = ['$scope'];

}).call(this);

},{}],4:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var FeaturesController;

  module.exports = FeaturesController = function($scope) {};

  FeaturesController.$inject = ['$scope'];

}).call(this);

},{}],5:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var HomeController;

  module.exports = HomeController = function($scope) {};

  HomeController.$inject = ['$scope'];

}).call(this);

},{}],6:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var ctr;

  ctr = module.exports = function($scope, $location, $ocModal, $http, $modal) {

    /*
    	## sourceURL=hello.js
     */
    $scope.getLogin = function() {
      return $http.get("/rest/getLogin").success(function(data, status, headers, config) {
        $scope.user = data.user;
        return $scope.checked = true;
      });
    };
    $scope.getLogin();
    $scope.goto = function(path) {
      $scope.path = path;
      return $location.path(path);
    };
    $scope.login = function() {
      var modalInstance;
      modalInstance = $modal.open({
        templateUrl: 'login/login.html',
        controller: require('./login/login')
      });
      return modalInstance.result.then(function(result) {
        return $scope.user = result;
      });
    };
    $scope.signup = function() {
      var modal;
      return modal = $modal.open({
        templateUrl: 'signup/signup.html',
        controller: require('./signup/signup')
      });
    };
    $scope.pay = function(description, amount) {
      return $modal.open({
        templateUrl: 'payment/payment.html',
        controller: require('./payment/payment')
      });
    };
    return $scope.logout = function() {
      return $http.post("/rest/logout").success(function(data, status, headers, config) {
        return delete $scope.user;
      });
    };
  };

  ctr.$inject = ['$scope', '$location', '$ocModal', '$http', '$modal'];

}).call(this);

},{"./login/login":8,"./payment/payment":9,"./signup/signup":10}],7:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var LoginInterceptor;

  module.exports = LoginInterceptor = function($q, $modal, $injector) {
    return {
      'self': this,
      'request': function(config) {
        return config;
      },
      'requestError': function(rejection) {
        return $q.reject(rejection);
      },
      'response': function(response) {
        var def, modalInstance;
        if (response.data === 'NOT AUTHENTICATED') {
          def = $q.defer();
          modalInstance = $modal.open({
            templateUrl: 'login/login.html',
            controller: require('./login')
          });
          modalInstance.result.then(function(result) {
            var $http;
            $http = $injector.invoke(function($http) {
              return $http;
            });
            return $http(response.config).then(function(secondResponse) {
              return def.resolve(secondResponse);
            });
          }, function() {
            return def.reject("NOT AUTHORIZED");
          });
          return def.promise;
        } else {
          return response;
        }
      },
      'responseError': function(rejection) {
        return $q.reject(rejection);
      }
    };
  };

}).call(this);

},{"./login":8}],8:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var LoginController;

  module.exports = LoginController = function($scope, $ocModal, $http, $modalInstance, $injector) {
    setTimeout(function() {
      return $('#username').focus();
    }, 100);
    $scope.login = function() {
      $http = $injector.invoke(function($http) {
        return $http;
      });
      return $http.post('rest/login', {
        username: this.username,
        password: this.password
      }).error(function(data, status, headers, config) {
        return $scope.error = data;
      }).success(function(data, status, headers, config) {
        if (data.error) {
          return $scope.error = data.error;
        } else {
          return $modalInstance.close(data.user);
        }
      });
    };
    $scope.passwordReset = function() {
      $scope.resetting = true;
      delete $scope.error;
      return setTimeout(function() {
        return $('.focusme').focus();
      }, 100);
    };
    $scope.resetContinue = function() {
      if (!$scope.email || $scope.email.length === 0) {
        $scope.error = "Email is required";
        return;
      }
      return $http.post("/rest/requestPasswordReset", {
        email: $scope.email
      }).success(function(data, status, headers, config) {
        $scope.error = data.error;
        if (!data.error) {
          return $scope.sent = true;
        }
      }).error(function(data, status, headers, config) {
        return $scope.error = data;
      });
    };
    $scope.close = function() {
      return $ocModal.close();
    };
    return $scope.resetCancel = function() {
      $scope.resetting = false;
      delete $scope.error;
      return setTimeout(function() {
        return $('#username').focus();
      }, 100);
    };
  };

  LoginController.$inject = ['$scope', '$ocModal', '$http', '$modalInstance', '$injector'];

}).call(this);

},{}],9:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var PaymentController;

  module.exports = PaymentController = function($scope, $http, $modalInstance) {
    setTimeout(function() {
      return $('.amount').focus();
    }, 100);
    $scope.pay = function() {
      var handler, ref, ref1;
      if (!((ref = $scope.payment) != null ? ref.amount : void 0) || ((ref1 = $scope.payment) != null ? ref1.amount.length : void 0) === 0) {
        $scope.error = "Amount is required";
        return;
      }
      if (isNaN($scope.payment.amount)) {
        $scope.error = "Amount must be a number";
        return;
      }
      delete $scope.error;
      handler = StripeCheckout.configure({
        key: 'pk_test_6pRNASCoBOKtIshFeQd4XMUh',
        image: '/img/documentation/checkout/marketplace.png',
        token: function(token) {
          return $http.post("/rest/payment", {
            token: token
          }).success(function(data, status, headers, config) {
            $scope.error = data.error;
            if (!$scope.error) {
              return $scope.confirmed = true;
            }
          }).error(function(data, status, headers, config) {
            return $scope.error = data;
          });
        }
      });
      return handler.open({
        name: 'Webapp',
        description: 'Webapp subscription',
        amount: $scope.payment.amount * 100
      });
    };
    $scope.cancel = function() {
      return $modalInstance.close();
    };
    return $scope.close = function() {
      return $modalInstance.close();
    };
  };

  PaymentController.$inject = ['$scope', '$http', '$modalInstance'];

}).call(this);

},{}],10:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var SignupController;

  module.exports = SignupController = function($scope, $ocModal, $http) {
    setTimeout(function() {
      return $('#username').focus();
    }, 100);
    $scope.signup = function() {
      return $http.post("/rest/signup", {
        user: $scope.user
      }).error(function(data, status, headers, config) {
        return $scope.error = data;
      }).success(function(data, status, headers, config) {
        if (data.error) {
          return $scope.error = data.error;
        } else {
          return $scope.sent = true;
        }
      });
    };
    return $scope.close = function() {
      return $ocModal.close();
    };
  };

  SignupController.$inject = ['$scope', '$ocModal', '$http'];

}).call(this);

},{}]},{},[1]);
